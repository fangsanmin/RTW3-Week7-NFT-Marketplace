{"ast":null,"code":"/**\n * @remix-run/router v1.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state);\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation;\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission);\n\n      await startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        const fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let {\n        error\n      } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(redirect, navigation, replace) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match] = _ref8;\n      return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(request) {\n    let {\n      location,\n      result\n    } = await queryImpl(request);\n\n    if (result instanceof Response) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location\n    }, result);\n  }\n\n  async function queryRoute(request, routeId) {\n    let {\n      result\n    } = await queryImpl(request, routeId);\n\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // While we always re-throw Responses returned from loaders/actions\n      // directly for route requests and prevent the unwrapping into an\n      // ErrorResponse, we still need this for error cases _prior_ the\n      // execution of the loader/action, such as a 404/405 error.\n      if (isRouteErrorResponse(error)) {\n        return new Response(error.data, {\n          status: error.status,\n          statusText: error.statusText\n        });\n      } // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n\n\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(request, routeId) {\n    invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    let {\n      location,\n      matches,\n      shortCircuitState\n    } = matchRequest(request, routeId);\n\n    try {\n      if (shortCircuitState) {\n        return {\n          location,\n          result: shortCircuitState\n        };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(request, matches, getTargetMatch(matches, location), routeId != null);\n        return {\n          location,\n          result\n        };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: _extends({}, result, {\n          actionData: null,\n          actionHeaders: {}\n        })\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return {\n          location,\n          result: e\n        };\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {}\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, isRouteRequest, pendingActionError) {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(m => m.route.loader); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m, true, isRouteRequest))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  function matchRequest(req, routeId) {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (matches && routeId) {\n      matches = matches.filter(m => m.route.id === routeId);\n    } // Short circuit with a 404 if we match nothing\n\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n\n    return {\n      location,\n      matches\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match] = _ref10; // This fetcher was cancelled from a prior action submission - force reload\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, skipRedirects, isRouteRequest) {\n  if (skipRedirects === void 0) {\n    skipRedirects = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params\n    }), abortPromise]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n\nfunction createRequest(location, signal, submission) {\n  let url = createURL(location).toString();\n  let init = {\n    signal\n  };\n\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || r.path === \"\" || r.path === \"/\") || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\n\nfunction getMethodNotAllowedResult(path) {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location) {\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning$1","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_ref","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","invariant","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","warning","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","_state$navigation$for","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","handleLoaders","result","actionMatch","getTargetMatch","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","fetcher","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","doneFetcher","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","all","_ref8","resolveDeferredResults","_ref9","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","queryImpl","queryRoute","values","routeData","find","method","shortCircuitState","matchRequest","submit","loadRouteData","actionHeaders","isRouteRequest","URL","Location","statusCode","loaderHeaders","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","req","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isFetcher","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","type","skipRedirects","resultType","onReject","handler","contentType","text","deferred","toUpperCase","body","Request","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","isRevalidatingLoader","unwrap","getAll","handle","origin","UNSAFE_convertRoutesToDataRoutes"],"sources":["/Users/fangsanmin/RTW3-Week7-NFT-Marketplace/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state);\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation;\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission);\n\n      await startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        const fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let {\n        error\n      } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(redirect, navigation, replace) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match] = _ref8;\n      return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(request) {\n    let {\n      location,\n      result\n    } = await queryImpl(request);\n\n    if (result instanceof Response) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location\n    }, result);\n  }\n\n  async function queryRoute(request, routeId) {\n    let {\n      result\n    } = await queryImpl(request, routeId);\n\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // While we always re-throw Responses returned from loaders/actions\n      // directly for route requests and prevent the unwrapping into an\n      // ErrorResponse, we still need this for error cases _prior_ the\n      // execution of the loader/action, such as a 404/405 error.\n      if (isRouteErrorResponse(error)) {\n        return new Response(error.data, {\n          status: error.status,\n          statusText: error.statusText\n        });\n      } // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n\n\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(request, routeId) {\n    invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    let {\n      location,\n      matches,\n      shortCircuitState\n    } = matchRequest(request, routeId);\n\n    try {\n      if (shortCircuitState) {\n        return {\n          location,\n          result: shortCircuitState\n        };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(request, matches, getTargetMatch(matches, location), routeId != null);\n        return {\n          location,\n          result\n        };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: _extends({}, result, {\n          actionData: null,\n          actionHeaders: {}\n        })\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return {\n          location,\n          result: e\n        };\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {}\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, isRouteRequest, pendingActionError) {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(m => m.route.loader); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m, true, isRouteRequest))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  function matchRequest(req, routeId) {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (matches && routeId) {\n      matches = matches.filter(m => m.route.id === routeId);\n    } // Short circuit with a 404 if we match nothing\n\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n\n    return {\n      location,\n      matches\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match] = _ref10;\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, skipRedirects, isRouteRequest) {\n  if (skipRedirects === void 0) {\n    skipRedirects = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params\n    }), abortPromise]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n\nfunction createRequest(location, signal, submission) {\n  let url = createURL(location).toString();\n  let init = {\n    signal\n  };\n\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || r.path === \"\" || r.path === \"/\") || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\n\nfunction getMethodNotAllowedResult(path) {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location) {\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };\n//# sourceMappingURL=router.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}